/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
goog.exportSymbol('proto.v1.CreateProcedureRequest', null, global);
goog.exportSymbol('proto.v1.CreateProcedureResponse', null, global);
goog.exportSymbol('proto.v1.DeleteProcedureRequest', null, global);
goog.exportSymbol('proto.v1.DeleteProcedureResponse', null, global);
goog.exportSymbol('proto.v1.GetProceduresRequest', null, global);
goog.exportSymbol('proto.v1.GetProceduresResponse', null, global);
goog.exportSymbol('proto.v1.LockProcedureRequest', null, global);
goog.exportSymbol('proto.v1.LockProcedureResponse', null, global);
goog.exportSymbol('proto.v1.Notification', null, global);
goog.exportSymbol('proto.v1.NotificationType', null, global);
goog.exportSymbol('proto.v1.ProcedureAction', null, global);
goog.exportSymbol('proto.v1.ProcedureActionType', null, global);
goog.exportSymbol('proto.v1.ProcedureAdded', null, global);
goog.exportSymbol('proto.v1.ProcedureCondition', null, global);
goog.exportSymbol('proto.v1.ProcedureDeleted', null, global);
goog.exportSymbol('proto.v1.ProcedureLocked', null, global);
goog.exportSymbol('proto.v1.ProcedureSchedule', null, global);
goog.exportSymbol('proto.v1.ProcedureStep', null, global);
goog.exportSymbol('proto.v1.ProcedureStepResult', null, global);
goog.exportSymbol('proto.v1.ProcedureTemplate', null, global);
goog.exportSymbol('proto.v1.ProcedureUpdated', null, global);
goog.exportSymbol('proto.v1.UpdateProcedureRequest', null, global);
goog.exportSymbol('proto.v1.UpdateProcedureResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureStepResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ProcedureStepResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureStepResult.displayName = 'proto.v1.ProcedureStepResult';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureStepResult.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureStepResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureStepResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureStepResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    procedurestepresultid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequencenumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    name: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureStepResult}
 */
proto.v1.ProcedureStepResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureStepResult;
  return proto.v1.ProcedureStepResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureStepResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureStepResult}
 */
proto.v1.ProcedureStepResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcedurestepresultid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequencenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureStepResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureStepResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureStepResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureStepResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcedurestepresultid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSequencenumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional int32 procedureStepResultID = 1;
 * @return {number}
 */
proto.v1.ProcedureStepResult.prototype.getProcedurestepresultid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.ProcedureStepResult.prototype.setProcedurestepresultid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sequenceNumber = 2;
 * @return {number}
 */
proto.v1.ProcedureStepResult.prototype.getSequencenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.ProcedureStepResult.prototype.setSequencenumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string name = 3;
 * @return {string}
 */
proto.v1.ProcedureStepResult.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.ProcedureStepResult.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ProcedureAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureAction.displayName = 'proto.v1.ProcedureAction';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureAction.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    procedureactionid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    procedurestepid: jspb.Message.getFieldWithDefault(msg, 3, 0),
    actiontype: jspb.Message.getFieldWithDefault(msg, 4, 0),
    actionparams: jspb.Message.getFieldWithDefault(msg, 5, ""),
    isautomatic: jspb.Message.getFieldWithDefault(msg, 6, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureAction}
 */
proto.v1.ProcedureAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureAction;
  return proto.v1.ProcedureAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureAction}
 */
proto.v1.ProcedureAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcedureactionid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcedurestepid(value);
      break;
    case 4:
      var value = /** @type {!proto.v1.ProcedureActionType} */ (reader.readEnum());
      msg.setActiontype(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setActionparams(value);
      break;
    case 6:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsautomatic(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProcedureactionid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getProcedurestepid();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getActiontype();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
  f = message.getActionparams();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getIsautomatic();
  if (f) {
    writer.writeBool(
      6,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.v1.ProcedureAction.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.ProcedureAction.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 procedureActionId = 2;
 * @return {number}
 */
proto.v1.ProcedureAction.prototype.getProcedureactionid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.ProcedureAction.prototype.setProcedureactionid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 procedureStepId = 3;
 * @return {number}
 */
proto.v1.ProcedureAction.prototype.getProcedurestepid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.ProcedureAction.prototype.setProcedurestepid = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional ProcedureActionType actionType = 4;
 * @return {!proto.v1.ProcedureActionType}
 */
proto.v1.ProcedureAction.prototype.getActiontype = function() {
  return /** @type {!proto.v1.ProcedureActionType} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.v1.ProcedureActionType} value */
proto.v1.ProcedureAction.prototype.setActiontype = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};


/**
 * optional string actionParams = 5;
 * @return {string}
 */
proto.v1.ProcedureAction.prototype.getActionparams = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.v1.ProcedureAction.prototype.setActionparams = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional bool isAutomatic = 6;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.v1.ProcedureAction.prototype.getIsautomatic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 6, false));
};


/** @param {boolean} value */
proto.v1.ProcedureAction.prototype.setIsautomatic = function(value) {
  jspb.Message.setProto3BooleanField(this, 6, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureStep = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.ProcedureStep.repeatedFields_, null);
};
goog.inherits(proto.v1.ProcedureStep, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureStep.displayName = 'proto.v1.ProcedureStep';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.ProcedureStep.repeatedFields_ = [5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureStep.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureStep.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureStep} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureStep.toObject = function(includeInstance, msg) {
  var f, obj = {
    procedurestepid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    sequencenumber: jspb.Message.getFieldWithDefault(msg, 2, 0),
    title: jspb.Message.getFieldWithDefault(msg, 3, ""),
    intruction: jspb.Message.getFieldWithDefault(msg, 4, ""),
    possibleresultsList: jspb.Message.toObjectList(msg.getPossibleresultsList(),
    proto.v1.ProcedureStepResult.toObject, includeInstance),
    procedureaction: (f = msg.getProcedureaction()) && proto.v1.ProcedureAction.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureStep}
 */
proto.v1.ProcedureStep.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureStep;
  return proto.v1.ProcedureStep.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureStep} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureStep}
 */
proto.v1.ProcedureStep.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProcedurestepid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSequencenumber(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setIntruction(value);
      break;
    case 5:
      var value = new proto.v1.ProcedureStepResult;
      reader.readMessage(value,proto.v1.ProcedureStepResult.deserializeBinaryFromReader);
      msg.addPossibleresults(value);
      break;
    case 6:
      var value = new proto.v1.ProcedureAction;
      reader.readMessage(value,proto.v1.ProcedureAction.deserializeBinaryFromReader);
      msg.setProcedureaction(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureStep.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureStep.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureStep} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureStep.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcedurestepid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSequencenumber();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getIntruction();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getPossibleresultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.v1.ProcedureStepResult.serializeBinaryToWriter
    );
  }
  f = message.getProcedureaction();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.v1.ProcedureAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 procedureStepID = 1;
 * @return {number}
 */
proto.v1.ProcedureStep.prototype.getProcedurestepid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.ProcedureStep.prototype.setProcedurestepid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 sequenceNumber = 2;
 * @return {number}
 */
proto.v1.ProcedureStep.prototype.getSequencenumber = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.ProcedureStep.prototype.setSequencenumber = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string title = 3;
 * @return {string}
 */
proto.v1.ProcedureStep.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.ProcedureStep.prototype.setTitle = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string intruction = 4;
 * @return {string}
 */
proto.v1.ProcedureStep.prototype.getIntruction = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.v1.ProcedureStep.prototype.setIntruction = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated ProcedureStepResult possibleResults = 5;
 * @return {!Array<!proto.v1.ProcedureStepResult>}
 */
proto.v1.ProcedureStep.prototype.getPossibleresultsList = function() {
  return /** @type{!Array<!proto.v1.ProcedureStepResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.ProcedureStepResult, 5));
};


/** @param {!Array<!proto.v1.ProcedureStepResult>} value */
proto.v1.ProcedureStep.prototype.setPossibleresultsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.v1.ProcedureStepResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.ProcedureStepResult}
 */
proto.v1.ProcedureStep.prototype.addPossibleresults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.v1.ProcedureStepResult, opt_index);
};


proto.v1.ProcedureStep.prototype.clearPossibleresultsList = function() {
  this.setPossibleresultsList([]);
};


/**
 * optional ProcedureAction procedureAction = 6;
 * @return {?proto.v1.ProcedureAction}
 */
proto.v1.ProcedureStep.prototype.getProcedureaction = function() {
  return /** @type{?proto.v1.ProcedureAction} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureAction, 6));
};


/** @param {?proto.v1.ProcedureAction|undefined} value */
proto.v1.ProcedureStep.prototype.setProcedureaction = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.v1.ProcedureStep.prototype.clearProcedureaction = function() {
  this.setProcedureaction(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureStep.prototype.hasProcedureaction = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ProcedureCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureCondition.displayName = 'proto.v1.ProcedureCondition';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventtypeid: jspb.Message.getFieldWithDefault(msg, 1, 0),
    severity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    priority: jspb.Message.getFieldWithDefault(msg, 3, 0),
    startat: (f = msg.getStartat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    endat: (f = msg.getEndat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureCondition}
 */
proto.v1.ProcedureCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureCondition;
  return proto.v1.ProcedureCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureCondition}
 */
proto.v1.ProcedureCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setEventtypeid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSeverity(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPriority(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartat(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEndat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventtypeid();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getSeverity();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getPriority();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getStartat();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndat();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional int32 eventTypeId = 1;
 * @return {number}
 */
proto.v1.ProcedureCondition.prototype.getEventtypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.ProcedureCondition.prototype.setEventtypeid = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 severity = 2;
 * @return {number}
 */
proto.v1.ProcedureCondition.prototype.getSeverity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.ProcedureCondition.prototype.setSeverity = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 priority = 3;
 * @return {number}
 */
proto.v1.ProcedureCondition.prototype.getPriority = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.v1.ProcedureCondition.prototype.setPriority = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp startAt = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.v1.ProcedureCondition.prototype.getStartat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.v1.ProcedureCondition.prototype.setStartat = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.v1.ProcedureCondition.prototype.clearStartat = function() {
  this.setStartat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureCondition.prototype.hasStartat = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp endAt = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.v1.ProcedureCondition.prototype.getEndat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.v1.ProcedureCondition.prototype.setEndat = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.v1.ProcedureCondition.prototype.clearEndat = function() {
  this.setEndat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureCondition.prototype.hasEndat = function() {
  return jspb.Message.getField(this, 5) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureSchedule = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ProcedureSchedule, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureSchedule.displayName = 'proto.v1.ProcedureSchedule';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureSchedule.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureSchedule.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureSchedule} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureSchedule.toObject = function(includeInstance, msg) {
  var f, obj = {
    recurrencetype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    startat: (f = msg.getStartat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    endat: (f = msg.getEndat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    recurrencevalues: jspb.Message.getFieldWithDefault(msg, 4, ""),
    duration: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureSchedule}
 */
proto.v1.ProcedureSchedule.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureSchedule;
  return proto.v1.ProcedureSchedule.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureSchedule} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureSchedule}
 */
proto.v1.ProcedureSchedule.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRecurrencetype(value);
      break;
    case 2:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setStartat(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setEndat(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRecurrencevalues(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setDuration(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureSchedule.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureSchedule.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureSchedule} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureSchedule.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRecurrencetype();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getStartat();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getEndat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getRecurrencevalues();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getDuration();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional int32 recurrenceType = 1;
 * @return {number}
 */
proto.v1.ProcedureSchedule.prototype.getRecurrencetype = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.ProcedureSchedule.prototype.setRecurrencetype = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional google.protobuf.Timestamp startAt = 2;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.v1.ProcedureSchedule.prototype.getStartat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 2));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.v1.ProcedureSchedule.prototype.setStartat = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.v1.ProcedureSchedule.prototype.clearStartat = function() {
  this.setStartat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureSchedule.prototype.hasStartat = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional google.protobuf.Timestamp endAt = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.v1.ProcedureSchedule.prototype.getEndat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.v1.ProcedureSchedule.prototype.setEndat = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.v1.ProcedureSchedule.prototype.clearEndat = function() {
  this.setEndat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureSchedule.prototype.hasEndat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string recurrenceValues = 4;
 * @return {string}
 */
proto.v1.ProcedureSchedule.prototype.getRecurrencevalues = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.v1.ProcedureSchedule.prototype.setRecurrencevalues = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 duration = 5;
 * @return {number}
 */
proto.v1.ProcedureSchedule.prototype.getDuration = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.v1.ProcedureSchedule.prototype.setDuration = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureTemplate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.ProcedureTemplate.repeatedFields_, null);
};
goog.inherits(proto.v1.ProcedureTemplate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureTemplate.displayName = 'proto.v1.ProcedureTemplate';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.ProcedureTemplate.repeatedFields_ = [14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureTemplate.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureTemplate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureTemplate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureTemplate.toObject = function(includeInstance, msg) {
  var f, obj = {
    procedureid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    description: jspb.Message.getFieldWithDefault(msg, 3, ""),
    creationdate: (f = msg.getCreationdate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    modifydate: (f = msg.getModifydate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    validitydate: (f = msg.getValiditydate()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    creatinguserid: jspb.Message.getFieldWithDefault(msg, 7, 0),
    modifyuserid: jspb.Message.getFieldWithDefault(msg, 8, 0),
    isactive: jspb.Message.getFieldWithDefault(msg, 9, false),
    isdeleted: jspb.Message.getFieldWithDefault(msg, 10, false),
    condition: (f = msg.getCondition()) && proto.v1.ProcedureCondition.toObject(includeInstance, f),
    geoarea: jspb.Message.getFieldWithDefault(msg, 12, ""),
    schedule: (f = msg.getSchedule()) && proto.v1.ProcedureSchedule.toObject(includeInstance, f),
    stepsList: jspb.Message.toObjectList(msg.getStepsList(),
    proto.v1.ProcedureStep.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureTemplate}
 */
proto.v1.ProcedureTemplate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureTemplate;
  return proto.v1.ProcedureTemplate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureTemplate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureTemplate}
 */
proto.v1.ProcedureTemplate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcedureid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setDescription(value);
      break;
    case 4:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setCreationdate(value);
      break;
    case 5:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setModifydate(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setValiditydate(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCreatinguserid(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setModifyuserid(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsactive(value);
      break;
    case 10:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsdeleted(value);
      break;
    case 11:
      var value = new proto.v1.ProcedureCondition;
      reader.readMessage(value,proto.v1.ProcedureCondition.deserializeBinaryFromReader);
      msg.setCondition(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setGeoarea(value);
      break;
    case 13:
      var value = new proto.v1.ProcedureSchedule;
      reader.readMessage(value,proto.v1.ProcedureSchedule.deserializeBinaryFromReader);
      msg.setSchedule(value);
      break;
    case 14:
      var value = new proto.v1.ProcedureStep;
      reader.readMessage(value,proto.v1.ProcedureStep.deserializeBinaryFromReader);
      msg.addSteps(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureTemplate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureTemplate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureTemplate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureTemplate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcedureid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getDescription();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCreationdate();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getModifydate();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getValiditydate();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getCreatinguserid();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getModifyuserid();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getIsactive();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
  f = message.getIsdeleted();
  if (f) {
    writer.writeBool(
      10,
      f
    );
  }
  f = message.getCondition();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.v1.ProcedureCondition.serializeBinaryToWriter
    );
  }
  f = message.getGeoarea();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getSchedule();
  if (f != null) {
    writer.writeMessage(
      13,
      f,
      proto.v1.ProcedureSchedule.serializeBinaryToWriter
    );
  }
  f = message.getStepsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      14,
      f,
      proto.v1.ProcedureStep.serializeBinaryToWriter
    );
  }
};


/**
 * optional string procedureId = 1;
 * @return {string}
 */
proto.v1.ProcedureTemplate.prototype.getProcedureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.ProcedureTemplate.prototype.setProcedureid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.v1.ProcedureTemplate.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.v1.ProcedureTemplate.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string description = 3;
 * @return {string}
 */
proto.v1.ProcedureTemplate.prototype.getDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.v1.ProcedureTemplate.prototype.setDescription = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional google.protobuf.Timestamp creationDate = 4;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.v1.ProcedureTemplate.prototype.getCreationdate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 4));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.v1.ProcedureTemplate.prototype.setCreationdate = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.v1.ProcedureTemplate.prototype.clearCreationdate = function() {
  this.setCreationdate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureTemplate.prototype.hasCreationdate = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional google.protobuf.Timestamp modifyDate = 5;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.v1.ProcedureTemplate.prototype.getModifydate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 5));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.v1.ProcedureTemplate.prototype.setModifydate = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.v1.ProcedureTemplate.prototype.clearModifydate = function() {
  this.setModifydate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureTemplate.prototype.hasModifydate = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional google.protobuf.Timestamp validityDate = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.v1.ProcedureTemplate.prototype.getValiditydate = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.v1.ProcedureTemplate.prototype.setValiditydate = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.v1.ProcedureTemplate.prototype.clearValiditydate = function() {
  this.setValiditydate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureTemplate.prototype.hasValiditydate = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional int32 creatingUserId = 7;
 * @return {number}
 */
proto.v1.ProcedureTemplate.prototype.getCreatinguserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.v1.ProcedureTemplate.prototype.setCreatinguserid = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 modifyUserId = 8;
 * @return {number}
 */
proto.v1.ProcedureTemplate.prototype.getModifyuserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.v1.ProcedureTemplate.prototype.setModifyuserid = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool isActive = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.v1.ProcedureTemplate.prototype.getIsactive = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.v1.ProcedureTemplate.prototype.setIsactive = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};


/**
 * optional bool isDeleted = 10;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.v1.ProcedureTemplate.prototype.getIsdeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 10, false));
};


/** @param {boolean} value */
proto.v1.ProcedureTemplate.prototype.setIsdeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 10, value);
};


/**
 * optional ProcedureCondition condition = 11;
 * @return {?proto.v1.ProcedureCondition}
 */
proto.v1.ProcedureTemplate.prototype.getCondition = function() {
  return /** @type{?proto.v1.ProcedureCondition} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureCondition, 11));
};


/** @param {?proto.v1.ProcedureCondition|undefined} value */
proto.v1.ProcedureTemplate.prototype.setCondition = function(value) {
  jspb.Message.setWrapperField(this, 11, value);
};


proto.v1.ProcedureTemplate.prototype.clearCondition = function() {
  this.setCondition(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureTemplate.prototype.hasCondition = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional string geoArea = 12;
 * @return {string}
 */
proto.v1.ProcedureTemplate.prototype.getGeoarea = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/** @param {string} value */
proto.v1.ProcedureTemplate.prototype.setGeoarea = function(value) {
  jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional ProcedureSchedule schedule = 13;
 * @return {?proto.v1.ProcedureSchedule}
 */
proto.v1.ProcedureTemplate.prototype.getSchedule = function() {
  return /** @type{?proto.v1.ProcedureSchedule} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureSchedule, 13));
};


/** @param {?proto.v1.ProcedureSchedule|undefined} value */
proto.v1.ProcedureTemplate.prototype.setSchedule = function(value) {
  jspb.Message.setWrapperField(this, 13, value);
};


proto.v1.ProcedureTemplate.prototype.clearSchedule = function() {
  this.setSchedule(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureTemplate.prototype.hasSchedule = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * repeated ProcedureStep steps = 14;
 * @return {!Array<!proto.v1.ProcedureStep>}
 */
proto.v1.ProcedureTemplate.prototype.getStepsList = function() {
  return /** @type{!Array<!proto.v1.ProcedureStep>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.ProcedureStep, 14));
};


/** @param {!Array<!proto.v1.ProcedureStep>} value */
proto.v1.ProcedureTemplate.prototype.setStepsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 14, value);
};


/**
 * @param {!proto.v1.ProcedureStep=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.ProcedureStep}
 */
proto.v1.ProcedureTemplate.prototype.addSteps = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 14, opt_value, proto.v1.ProcedureStep, opt_index);
};


proto.v1.ProcedureTemplate.prototype.clearStepsList = function() {
  this.setStepsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.CreateProcedureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.CreateProcedureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.CreateProcedureRequest.displayName = 'proto.v1.CreateProcedureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.CreateProcedureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.CreateProcedureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.CreateProcedureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.CreateProcedureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    proceduretemplate: (f = msg.getProceduretemplate()) && proto.v1.ProcedureTemplate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.CreateProcedureRequest}
 */
proto.v1.CreateProcedureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.CreateProcedureRequest;
  return proto.v1.CreateProcedureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.CreateProcedureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.CreateProcedureRequest}
 */
proto.v1.CreateProcedureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.ProcedureTemplate;
      reader.readMessage(value,proto.v1.ProcedureTemplate.deserializeBinaryFromReader);
      msg.setProceduretemplate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.CreateProcedureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.CreateProcedureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.CreateProcedureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.CreateProcedureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProceduretemplate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.ProcedureTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcedureTemplate procedureTemplate = 1;
 * @return {?proto.v1.ProcedureTemplate}
 */
proto.v1.CreateProcedureRequest.prototype.getProceduretemplate = function() {
  return /** @type{?proto.v1.ProcedureTemplate} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureTemplate, 1));
};


/** @param {?proto.v1.ProcedureTemplate|undefined} value */
proto.v1.CreateProcedureRequest.prototype.setProceduretemplate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.v1.CreateProcedureRequest.prototype.clearProceduretemplate = function() {
  this.setProceduretemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.CreateProcedureRequest.prototype.hasProceduretemplate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.CreateProcedureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.CreateProcedureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.CreateProcedureResponse.displayName = 'proto.v1.CreateProcedureResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.CreateProcedureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.CreateProcedureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.CreateProcedureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.CreateProcedureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.CreateProcedureResponse}
 */
proto.v1.CreateProcedureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.CreateProcedureResponse;
  return proto.v1.CreateProcedureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.CreateProcedureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.CreateProcedureResponse}
 */
proto.v1.CreateProcedureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.CreateProcedureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.CreateProcedureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.CreateProcedureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.CreateProcedureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.UpdateProcedureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.UpdateProcedureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.UpdateProcedureRequest.displayName = 'proto.v1.UpdateProcedureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.UpdateProcedureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.UpdateProcedureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.UpdateProcedureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.UpdateProcedureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    proceduretemplate: (f = msg.getProceduretemplate()) && proto.v1.ProcedureTemplate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.UpdateProcedureRequest}
 */
proto.v1.UpdateProcedureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.UpdateProcedureRequest;
  return proto.v1.UpdateProcedureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.UpdateProcedureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.UpdateProcedureRequest}
 */
proto.v1.UpdateProcedureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.ProcedureTemplate;
      reader.readMessage(value,proto.v1.ProcedureTemplate.deserializeBinaryFromReader);
      msg.setProceduretemplate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.UpdateProcedureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.UpdateProcedureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.UpdateProcedureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.UpdateProcedureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProceduretemplate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.ProcedureTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcedureTemplate procedureTemplate = 1;
 * @return {?proto.v1.ProcedureTemplate}
 */
proto.v1.UpdateProcedureRequest.prototype.getProceduretemplate = function() {
  return /** @type{?proto.v1.ProcedureTemplate} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureTemplate, 1));
};


/** @param {?proto.v1.ProcedureTemplate|undefined} value */
proto.v1.UpdateProcedureRequest.prototype.setProceduretemplate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.v1.UpdateProcedureRequest.prototype.clearProceduretemplate = function() {
  this.setProceduretemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.UpdateProcedureRequest.prototype.hasProceduretemplate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.UpdateProcedureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.UpdateProcedureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.UpdateProcedureResponse.displayName = 'proto.v1.UpdateProcedureResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.UpdateProcedureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.UpdateProcedureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.UpdateProcedureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.UpdateProcedureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.UpdateProcedureResponse}
 */
proto.v1.UpdateProcedureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.UpdateProcedureResponse;
  return proto.v1.UpdateProcedureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.UpdateProcedureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.UpdateProcedureResponse}
 */
proto.v1.UpdateProcedureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.UpdateProcedureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.UpdateProcedureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.UpdateProcedureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.UpdateProcedureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.DeleteProcedureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.DeleteProcedureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.DeleteProcedureRequest.displayName = 'proto.v1.DeleteProcedureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.DeleteProcedureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.DeleteProcedureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.DeleteProcedureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.DeleteProcedureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    procedureid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.DeleteProcedureRequest}
 */
proto.v1.DeleteProcedureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.DeleteProcedureRequest;
  return proto.v1.DeleteProcedureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.DeleteProcedureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.DeleteProcedureRequest}
 */
proto.v1.DeleteProcedureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcedureid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.DeleteProcedureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.DeleteProcedureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.DeleteProcedureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.DeleteProcedureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcedureid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string procedureId = 1;
 * @return {string}
 */
proto.v1.DeleteProcedureRequest.prototype.getProcedureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.DeleteProcedureRequest.prototype.setProcedureid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.DeleteProcedureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.DeleteProcedureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.DeleteProcedureResponse.displayName = 'proto.v1.DeleteProcedureResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.DeleteProcedureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.DeleteProcedureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.DeleteProcedureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.DeleteProcedureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.DeleteProcedureResponse}
 */
proto.v1.DeleteProcedureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.DeleteProcedureResponse;
  return proto.v1.DeleteProcedureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.DeleteProcedureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.DeleteProcedureResponse}
 */
proto.v1.DeleteProcedureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.DeleteProcedureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.DeleteProcedureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.DeleteProcedureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.DeleteProcedureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LockProcedureRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LockProcedureRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.LockProcedureRequest.displayName = 'proto.v1.LockProcedureRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.LockProcedureRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.LockProcedureRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.LockProcedureRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LockProcedureRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    procedureid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    islocked: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LockProcedureRequest}
 */
proto.v1.LockProcedureRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.LockProcedureRequest;
  return proto.v1.LockProcedureRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LockProcedureRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LockProcedureRequest}
 */
proto.v1.LockProcedureRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcedureid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LockProcedureRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.LockProcedureRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LockProcedureRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LockProcedureRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcedureid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIslocked();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string procedureId = 1;
 * @return {string}
 */
proto.v1.LockProcedureRequest.prototype.getProcedureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.LockProcedureRequest.prototype.setProcedureid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 userId = 2;
 * @return {number}
 */
proto.v1.LockProcedureRequest.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.LockProcedureRequest.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool isLocked = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.v1.LockProcedureRequest.prototype.getIslocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.v1.LockProcedureRequest.prototype.setIslocked = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.LockProcedureResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.LockProcedureResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.LockProcedureResponse.displayName = 'proto.v1.LockProcedureResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.LockProcedureResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.LockProcedureResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.LockProcedureResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LockProcedureResponse.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.LockProcedureResponse}
 */
proto.v1.LockProcedureResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.LockProcedureResponse;
  return proto.v1.LockProcedureResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.LockProcedureResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.LockProcedureResponse}
 */
proto.v1.LockProcedureResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.LockProcedureResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.LockProcedureResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.LockProcedureResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.LockProcedureResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.GetProceduresRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.GetProceduresRequest.repeatedFields_, null);
};
goog.inherits(proto.v1.GetProceduresRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.GetProceduresRequest.displayName = 'proto.v1.GetProceduresRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.GetProceduresRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.GetProceduresRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.GetProceduresRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.GetProceduresRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.GetProceduresRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    skip: jspb.Message.getFieldWithDefault(msg, 1, 0),
    take: jspb.Message.getFieldWithDefault(msg, 2, 0),
    filterbyidsList: jspb.Message.getRepeatedField(msg, 3),
    filterbyeventtypeid: jspb.Message.getFieldWithDefault(msg, 4, 0),
    filterbyeventseverity: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.GetProceduresRequest}
 */
proto.v1.GetProceduresRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.GetProceduresRequest;
  return proto.v1.GetProceduresRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.GetProceduresRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.GetProceduresRequest}
 */
proto.v1.GetProceduresRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSkip(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTake(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addFilterbyids(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFilterbyeventtypeid(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFilterbyeventseverity(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.GetProceduresRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.GetProceduresRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.GetProceduresRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.GetProceduresRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkip();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getTake();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getFilterbyidsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getFilterbyeventtypeid();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getFilterbyeventseverity();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
};


/**
 * optional int32 skip = 1;
 * @return {number}
 */
proto.v1.GetProceduresRequest.prototype.getSkip = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.v1.GetProceduresRequest.prototype.setSkip = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 take = 2;
 * @return {number}
 */
proto.v1.GetProceduresRequest.prototype.getTake = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.GetProceduresRequest.prototype.setTake = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string filterByIds = 3;
 * @return {!Array<string>}
 */
proto.v1.GetProceduresRequest.prototype.getFilterbyidsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array<string>} value */
proto.v1.GetProceduresRequest.prototype.setFilterbyidsList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.v1.GetProceduresRequest.prototype.addFilterbyids = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.v1.GetProceduresRequest.prototype.clearFilterbyidsList = function() {
  this.setFilterbyidsList([]);
};


/**
 * optional int32 filterByEventTypeId = 4;
 * @return {number}
 */
proto.v1.GetProceduresRequest.prototype.getFilterbyeventtypeid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.v1.GetProceduresRequest.prototype.setFilterbyeventtypeid = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 filterByEventSeverity = 5;
 * @return {number}
 */
proto.v1.GetProceduresRequest.prototype.getFilterbyeventseverity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.v1.GetProceduresRequest.prototype.setFilterbyeventseverity = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.GetProceduresResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.v1.GetProceduresResponse.repeatedFields_, null);
};
goog.inherits(proto.v1.GetProceduresResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.GetProceduresResponse.displayName = 'proto.v1.GetProceduresResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.v1.GetProceduresResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.GetProceduresResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.GetProceduresResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.GetProceduresResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.GetProceduresResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    proceduresList: jspb.Message.toObjectList(msg.getProceduresList(),
    proto.v1.ProcedureTemplate.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.GetProceduresResponse}
 */
proto.v1.GetProceduresResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.GetProceduresResponse;
  return proto.v1.GetProceduresResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.GetProceduresResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.GetProceduresResponse}
 */
proto.v1.GetProceduresResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.ProcedureTemplate;
      reader.readMessage(value,proto.v1.ProcedureTemplate.deserializeBinaryFromReader);
      msg.addProcedures(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.GetProceduresResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.GetProceduresResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.GetProceduresResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.GetProceduresResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProceduresList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.v1.ProcedureTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcedureTemplate procedures = 1;
 * @return {!Array<!proto.v1.ProcedureTemplate>}
 */
proto.v1.GetProceduresResponse.prototype.getProceduresList = function() {
  return /** @type{!Array<!proto.v1.ProcedureTemplate>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.v1.ProcedureTemplate, 1));
};


/** @param {!Array<!proto.v1.ProcedureTemplate>} value */
proto.v1.GetProceduresResponse.prototype.setProceduresList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.v1.ProcedureTemplate=} opt_value
 * @param {number=} opt_index
 * @return {!proto.v1.ProcedureTemplate}
 */
proto.v1.GetProceduresResponse.prototype.addProcedures = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.v1.ProcedureTemplate, opt_index);
};


proto.v1.GetProceduresResponse.prototype.clearProceduresList = function() {
  this.setProceduresList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.Notification = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.v1.Notification.oneofGroups_);
};
goog.inherits(proto.v1.Notification, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.Notification.displayName = 'proto.v1.Notification';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.v1.Notification.oneofGroups_ = [[4,5,6,7]];

/**
 * @enum {number}
 */
proto.v1.Notification.MessageCase = {
  MESSAGE_NOT_SET: 0,
  ADDED: 4,
  UPDATED: 5,
  DELETED: 6,
  LOCKED: 7
};

/**
 * @return {proto.v1.Notification.MessageCase}
 */
proto.v1.Notification.prototype.getMessageCase = function() {
  return /** @type {proto.v1.Notification.MessageCase} */(jspb.Message.computeOneofCase(this, proto.v1.Notification.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.Notification.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.Notification.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.Notification} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Notification.toObject = function(includeInstance, msg) {
  var f, obj = {
    entitytype: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    publishedat: (f = msg.getPublishedat()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    added: (f = msg.getAdded()) && proto.v1.ProcedureAdded.toObject(includeInstance, f),
    updated: (f = msg.getUpdated()) && proto.v1.ProcedureUpdated.toObject(includeInstance, f),
    deleted: (f = msg.getDeleted()) && proto.v1.ProcedureDeleted.toObject(includeInstance, f),
    locked: (f = msg.getLocked()) && proto.v1.ProcedureLocked.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.Notification}
 */
proto.v1.Notification.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.Notification;
  return proto.v1.Notification.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.Notification} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.Notification}
 */
proto.v1.Notification.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEntitytype(value);
      break;
    case 2:
      var value = /** @type {!proto.v1.NotificationType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setPublishedat(value);
      break;
    case 4:
      var value = new proto.v1.ProcedureAdded;
      reader.readMessage(value,proto.v1.ProcedureAdded.deserializeBinaryFromReader);
      msg.setAdded(value);
      break;
    case 5:
      var value = new proto.v1.ProcedureUpdated;
      reader.readMessage(value,proto.v1.ProcedureUpdated.deserializeBinaryFromReader);
      msg.setUpdated(value);
      break;
    case 6:
      var value = new proto.v1.ProcedureDeleted;
      reader.readMessage(value,proto.v1.ProcedureDeleted.deserializeBinaryFromReader);
      msg.setDeleted(value);
      break;
    case 7:
      var value = new proto.v1.ProcedureLocked;
      reader.readMessage(value,proto.v1.ProcedureLocked.deserializeBinaryFromReader);
      msg.setLocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.Notification.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.Notification.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.Notification} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.Notification.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEntitytype();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getPublishedat();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getAdded();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.v1.ProcedureAdded.serializeBinaryToWriter
    );
  }
  f = message.getUpdated();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.v1.ProcedureUpdated.serializeBinaryToWriter
    );
  }
  f = message.getDeleted();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.v1.ProcedureDeleted.serializeBinaryToWriter
    );
  }
  f = message.getLocked();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.v1.ProcedureLocked.serializeBinaryToWriter
    );
  }
};


/**
 * optional string entityType = 1;
 * @return {string}
 */
proto.v1.Notification.prototype.getEntitytype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.Notification.prototype.setEntitytype = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional NotificationType type = 2;
 * @return {!proto.v1.NotificationType}
 */
proto.v1.Notification.prototype.getType = function() {
  return /** @type {!proto.v1.NotificationType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.v1.NotificationType} value */
proto.v1.Notification.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp publishedAt = 3;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.v1.Notification.prototype.getPublishedat = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 3));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.v1.Notification.prototype.setPublishedat = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.v1.Notification.prototype.clearPublishedat = function() {
  this.setPublishedat(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.Notification.prototype.hasPublishedat = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional ProcedureAdded added = 4;
 * @return {?proto.v1.ProcedureAdded}
 */
proto.v1.Notification.prototype.getAdded = function() {
  return /** @type{?proto.v1.ProcedureAdded} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureAdded, 4));
};


/** @param {?proto.v1.ProcedureAdded|undefined} value */
proto.v1.Notification.prototype.setAdded = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.v1.Notification.oneofGroups_[0], value);
};


proto.v1.Notification.prototype.clearAdded = function() {
  this.setAdded(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.Notification.prototype.hasAdded = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional ProcedureUpdated updated = 5;
 * @return {?proto.v1.ProcedureUpdated}
 */
proto.v1.Notification.prototype.getUpdated = function() {
  return /** @type{?proto.v1.ProcedureUpdated} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureUpdated, 5));
};


/** @param {?proto.v1.ProcedureUpdated|undefined} value */
proto.v1.Notification.prototype.setUpdated = function(value) {
  jspb.Message.setOneofWrapperField(this, 5, proto.v1.Notification.oneofGroups_[0], value);
};


proto.v1.Notification.prototype.clearUpdated = function() {
  this.setUpdated(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.Notification.prototype.hasUpdated = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional ProcedureDeleted deleted = 6;
 * @return {?proto.v1.ProcedureDeleted}
 */
proto.v1.Notification.prototype.getDeleted = function() {
  return /** @type{?proto.v1.ProcedureDeleted} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureDeleted, 6));
};


/** @param {?proto.v1.ProcedureDeleted|undefined} value */
proto.v1.Notification.prototype.setDeleted = function(value) {
  jspb.Message.setOneofWrapperField(this, 6, proto.v1.Notification.oneofGroups_[0], value);
};


proto.v1.Notification.prototype.clearDeleted = function() {
  this.setDeleted(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.Notification.prototype.hasDeleted = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional ProcedureLocked locked = 7;
 * @return {?proto.v1.ProcedureLocked}
 */
proto.v1.Notification.prototype.getLocked = function() {
  return /** @type{?proto.v1.ProcedureLocked} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureLocked, 7));
};


/** @param {?proto.v1.ProcedureLocked|undefined} value */
proto.v1.Notification.prototype.setLocked = function(value) {
  jspb.Message.setOneofWrapperField(this, 7, proto.v1.Notification.oneofGroups_[0], value);
};


proto.v1.Notification.prototype.clearLocked = function() {
  this.setLocked(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.Notification.prototype.hasLocked = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureAdded = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ProcedureAdded, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureAdded.displayName = 'proto.v1.ProcedureAdded';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureAdded.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureAdded.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureAdded} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureAdded.toObject = function(includeInstance, msg) {
  var f, obj = {
    proceduretemplate: (f = msg.getProceduretemplate()) && proto.v1.ProcedureTemplate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureAdded}
 */
proto.v1.ProcedureAdded.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureAdded;
  return proto.v1.ProcedureAdded.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureAdded} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureAdded}
 */
proto.v1.ProcedureAdded.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.ProcedureTemplate;
      reader.readMessage(value,proto.v1.ProcedureTemplate.deserializeBinaryFromReader);
      msg.setProceduretemplate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureAdded.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureAdded.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureAdded} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureAdded.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProceduretemplate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.ProcedureTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcedureTemplate procedureTemplate = 1;
 * @return {?proto.v1.ProcedureTemplate}
 */
proto.v1.ProcedureAdded.prototype.getProceduretemplate = function() {
  return /** @type{?proto.v1.ProcedureTemplate} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureTemplate, 1));
};


/** @param {?proto.v1.ProcedureTemplate|undefined} value */
proto.v1.ProcedureAdded.prototype.setProceduretemplate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.v1.ProcedureAdded.prototype.clearProceduretemplate = function() {
  this.setProceduretemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureAdded.prototype.hasProceduretemplate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureUpdated = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ProcedureUpdated, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureUpdated.displayName = 'proto.v1.ProcedureUpdated';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureUpdated.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureUpdated.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureUpdated} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureUpdated.toObject = function(includeInstance, msg) {
  var f, obj = {
    proceduretemplate: (f = msg.getProceduretemplate()) && proto.v1.ProcedureTemplate.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureUpdated}
 */
proto.v1.ProcedureUpdated.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureUpdated;
  return proto.v1.ProcedureUpdated.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureUpdated} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureUpdated}
 */
proto.v1.ProcedureUpdated.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.v1.ProcedureTemplate;
      reader.readMessage(value,proto.v1.ProcedureTemplate.deserializeBinaryFromReader);
      msg.setProceduretemplate(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureUpdated.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureUpdated.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureUpdated} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureUpdated.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProceduretemplate();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.v1.ProcedureTemplate.serializeBinaryToWriter
    );
  }
};


/**
 * optional ProcedureTemplate procedureTemplate = 1;
 * @return {?proto.v1.ProcedureTemplate}
 */
proto.v1.ProcedureUpdated.prototype.getProceduretemplate = function() {
  return /** @type{?proto.v1.ProcedureTemplate} */ (
    jspb.Message.getWrapperField(this, proto.v1.ProcedureTemplate, 1));
};


/** @param {?proto.v1.ProcedureTemplate|undefined} value */
proto.v1.ProcedureUpdated.prototype.setProceduretemplate = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.v1.ProcedureUpdated.prototype.clearProceduretemplate = function() {
  this.setProceduretemplate(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.v1.ProcedureUpdated.prototype.hasProceduretemplate = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureDeleted = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ProcedureDeleted, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureDeleted.displayName = 'proto.v1.ProcedureDeleted';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureDeleted.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureDeleted.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureDeleted} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureDeleted.toObject = function(includeInstance, msg) {
  var f, obj = {
    procedureid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureDeleted}
 */
proto.v1.ProcedureDeleted.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureDeleted;
  return proto.v1.ProcedureDeleted.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureDeleted} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureDeleted}
 */
proto.v1.ProcedureDeleted.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcedureid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureDeleted.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureDeleted.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureDeleted} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureDeleted.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcedureid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string procedureId = 1;
 * @return {string}
 */
proto.v1.ProcedureDeleted.prototype.getProcedureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.ProcedureDeleted.prototype.setProcedureid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.v1.ProcedureLocked = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.v1.ProcedureLocked, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.v1.ProcedureLocked.displayName = 'proto.v1.ProcedureLocked';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.v1.ProcedureLocked.prototype.toObject = function(opt_includeInstance) {
  return proto.v1.ProcedureLocked.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.v1.ProcedureLocked} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureLocked.toObject = function(includeInstance, msg) {
  var f, obj = {
    procedureid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, 0),
    islocked: jspb.Message.getFieldWithDefault(msg, 3, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.v1.ProcedureLocked}
 */
proto.v1.ProcedureLocked.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.v1.ProcedureLocked;
  return proto.v1.ProcedureLocked.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.v1.ProcedureLocked} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.v1.ProcedureLocked}
 */
proto.v1.ProcedureLocked.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setProcedureid(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIslocked(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.v1.ProcedureLocked.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.v1.ProcedureLocked.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.v1.ProcedureLocked} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.v1.ProcedureLocked.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProcedureid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getIslocked();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
};


/**
 * optional string procedureId = 1;
 * @return {string}
 */
proto.v1.ProcedureLocked.prototype.getProcedureid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.v1.ProcedureLocked.prototype.setProcedureid = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 userId = 2;
 * @return {number}
 */
proto.v1.ProcedureLocked.prototype.getUserid = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.v1.ProcedureLocked.prototype.setUserid = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional bool isLocked = 3;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.v1.ProcedureLocked.prototype.getIslocked = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 3, false));
};


/** @param {boolean} value */
proto.v1.ProcedureLocked.prototype.setIslocked = function(value) {
  jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * @enum {number}
 */
proto.v1.ProcedureActionType = {
  NONE: 0,
  PRINTLOG: 1,
  DISPATCHFORCES: 2
};

/**
 * @enum {number}
 */
proto.v1.NotificationType = {
  CREATED: 0,
  UPDATED: 1,
  DELETED: 2
};

goog.object.extend(exports, proto.v1);
